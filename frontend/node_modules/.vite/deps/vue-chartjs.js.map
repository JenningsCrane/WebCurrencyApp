{
  "version": 3,
  "sources": ["../../vue-chartjs/src/props.ts", "../../vue-chartjs/src/utils.ts", "../../vue-chartjs/src/chart.ts", "../../vue-chartjs/src/typedCharts.ts"],
  "sourcesContent": ["import type { PropType } from 'vue'\nimport type {\n  ChartType,\n  ChartData,\n  ChartOptions,\n  Plugin,\n  UpdateMode\n} from 'chart.js'\n\nexport const CommonProps = {\n  data: {\n    type: Object as PropType<ChartData>,\n    required: true\n  },\n  options: {\n    type: Object as PropType<ChartOptions>,\n    default: () => ({})\n  },\n  plugins: {\n    type: Array as PropType<Plugin[]>,\n    default: () => []\n  },\n  datasetIdKey: {\n    type: String,\n    default: 'label'\n  },\n  updateMode: {\n    type: String as PropType<UpdateMode>,\n    default: undefined\n  }\n} as const\n\nexport const A11yProps = {\n  ariaLabel: {\n    type: String\n  },\n  ariaDescribedby: {\n    type: String\n  }\n} as const\n\nexport const Props = {\n  type: {\n    type: String as PropType<ChartType>,\n    required: true\n  },\n  ...CommonProps,\n  ...A11yProps\n} as const\n", "import { isProxy, toRaw, version } from 'vue'\nimport type {\n  Chart,\n  ChartType,\n  ChartData,\n  ChartDataset,\n  ChartOptions,\n  DefaultDataPoint\n} from 'chart.js'\n\nexport const compatProps =\n  version[0] === '2'\n    ? <I extends {}, T extends {}>(internals: I, props: T) =>\n        Object.assign(internals, { attrs: props }) as unknown as I & T\n    : <I extends {}, T extends {}>(internals: I, props: T) =>\n        Object.assign(internals, props)\n\nexport function toRawIfProxy<T>(obj: T) {\n  return isProxy(obj) ? toRaw(obj) : obj\n}\n\nexport function cloneProxy<T extends object>(obj: T, src = obj) {\n  return isProxy(src) ? new Proxy(obj, {}) : obj\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions)\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey: string\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  )\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey: string) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: []\n  }\n\n  setLabels(nextData, data.labels)\n  setDatasets(nextData, data.datasets, datasetIdKey)\n\n  return nextData\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'dataset',\n    { intersect: true },\n    false\n  )\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'nearest',\n    { intersect: true },\n    false\n  )\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(chart: Chart, event: MouseEvent) {\n  return chart.getElementsAtEventForMode(\n    event,\n    'index',\n    { intersect: true },\n    false\n  )\n}\n", "import { Chart as ChartJS } from 'chart.js'\nimport {\n  defineComponent,\n  h,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  shallowRef,\n  toRaw,\n  watch\n} from 'vue'\n\nimport type { ChartComponent } from './types.js'\nimport { Props } from './props.js'\nimport {\n  cloneData,\n  setLabels,\n  setDatasets,\n  setOptions,\n  toRawIfProxy,\n  cloneProxy\n} from './utils.js'\n\nexport const Chart = defineComponent({\n  props: Props,\n  setup(props, { expose, slots }) {\n    const canvasRef = ref<HTMLCanvasElement | null>(null)\n    const chartRef = shallowRef<ChartJS | null>(null)\n\n    expose({ chart: chartRef })\n\n    const renderChart = () => {\n      if (!canvasRef.value) return\n\n      const { type, data, options, plugins, datasetIdKey } = props\n      const clonedData = cloneData(data, datasetIdKey)\n      const proxiedData = cloneProxy(clonedData, data)\n\n      chartRef.value = new ChartJS(canvasRef.value, {\n        type,\n        data: proxiedData,\n        options: { ...options },\n        plugins\n      })\n    }\n\n    const destroyChart = () => {\n      const chart = toRaw(chartRef.value)\n\n      if (chart) {\n        chart.destroy()\n        chartRef.value = null\n      }\n    }\n\n    const update = (chart: ChartJS) => {\n      chart.update(props.updateMode)\n    }\n\n    onMounted(renderChart)\n\n    onBeforeUnmount(destroyChart)\n\n    watch(\n      [() => props.options, () => props.data],\n      (\n        [nextOptionsProxy, nextDataProxy],\n        [prevOptionsProxy, prevDataProxy]\n      ) => {\n        const chart = toRaw(chartRef.value)\n\n        if (!chart) {\n          return\n        }\n\n        let shouldUpdate = false\n\n        if (nextOptionsProxy) {\n          const nextOptions = toRawIfProxy(nextOptionsProxy)\n          const prevOptions = toRawIfProxy(prevOptionsProxy)\n\n          if (nextOptions && nextOptions !== prevOptions) {\n            setOptions(chart, nextOptions)\n            shouldUpdate = true\n          }\n        }\n\n        if (nextDataProxy) {\n          const nextLabels = toRawIfProxy(nextDataProxy.labels)\n          const prevLabels = toRawIfProxy(prevDataProxy.labels)\n          const nextDatasets = toRawIfProxy(nextDataProxy.datasets)\n          const prevDatasets = toRawIfProxy(prevDataProxy.datasets)\n\n          if (nextLabels !== prevLabels) {\n            setLabels(chart.config.data, nextLabels)\n            shouldUpdate = true\n          }\n\n          if (nextDatasets && nextDatasets !== prevDatasets) {\n            setDatasets(chart.config.data, nextDatasets, props.datasetIdKey)\n            shouldUpdate = true\n          }\n        }\n\n        if (shouldUpdate) {\n          nextTick(() => {\n            update(chart)\n          })\n        }\n      },\n      { deep: true }\n    )\n\n    return () => {\n      return h(\n        'canvas',\n        {\n          role: 'img',\n          ariaLabel: props.ariaLabel,\n          ariaDescribedby: props.ariaDescribedby,\n          ref: canvasRef\n        },\n        [h('p', {}, [slots.default ? slots.default() : ''])]\n      )\n    }\n  }\n}) as ChartComponent\n", "import { defineComponent, shallowRef, h } from 'vue'\nimport type { ChartType, ChartComponentLike, DefaultDataPoint } from 'chart.js'\nimport {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\nimport type { TypedChartComponent, ChartComponentRef } from './types.js'\nimport { CommonProps } from './props.js'\nimport { Chart } from './chart.js'\nimport { compatProps } from './utils.js'\n\nexport function createTypedChart<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  type: TType,\n  registerables: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> {\n  ChartJS.register(registerables)\n\n  return defineComponent({\n    props: CommonProps,\n    setup(props, { expose }) {\n      const ref = shallowRef<ChartJS | null>(null)\n      const reforwardRef = (chartRef: ChartComponentRef) => {\n        ref.value = chartRef?.chart\n      }\n\n      expose({ chart: ref })\n\n      return () => {\n        return h(\n          Chart,\n          compatProps(\n            {\n              ref: reforwardRef as any\n            },\n            {\n              type,\n              ...props\n            }\n          )\n        )\n      }\n    }\n  }) as any\n}\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController)\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController)\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController)\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController)\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n)\n"],
  "mappings": "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",
  "names": ["CommonProps", "data", "type", "Object", "required", "options", "default", "plugins", "Array", "datasetIdKey", "String", "updateMode", "undefined", "A11yProps", "ariaLabel", "ariaDescribedby", "Props", "compatProps", "version", "internals", "props", "assign", "attrs", "toRawIfProxy", "obj", "isProxy", "toRaw", "cloneProxy", "src", "Proxy", "setOptions", "chart", "nextOptions", "setLabels", "currentData", "nextLabels", "labels", "setDatasets", "nextDatasets", "addedDatasets", "datasets", "map", "nextDataset", "currentDataset", "find", "dataset", "includes", "push", "cloneData", "nextData", "getDatasetAtEvent", "event", "getElementsAtEventForMode", "intersect", "getElementAtEvent", "getElementsAtEvent", "Chart", "defineComponent", "setup", "expose", "slots", "canvasRef", "ref", "chartRef", "shallowRef", "renderChart", "value", "clonedData", "proxiedData", "ChartJS", "destroyChart", "destroy", "update", "onMounted", "onBeforeUnmount", "watch", "param", "nextOptionsProxy", "nextDataProxy", "prevOptionsProxy", "prevDataProxy", "shouldUpdate", "prevOptions", "prevLabels", "prevDatasets", "config", "nextTick", "deep", "h", "role", "createTypedChart", "registerables", "register", "reforwardRef", "Bar", "BarController", "Doughnut", "DoughnutController", "Line", "LineController", "Pie", "PieController", "PolarArea", "PolarAreaController", "Radar", "RadarController", "Bubble", "BubbleController", "Scatter", "ScatterController"]
}
